#!/usr/bin/env node

/**
 * Script pour v√©rifier l'√©tat de la base de donn√©es
 * Ce script v√©rifie que toutes les tables et colonnes n√©cessaires existent
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://localhost:54321';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkDatabaseStatus() {
  console.log('üîç V√©rification de l\'√©tat de la base de donn√©es...\n');

  try {
    // 1. V√©rifier les tables principales
    console.log('1. V√©rification des tables principales...');
    
    const tables = ['profiles', 'events', 'event_participants', 'event_games'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Table ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Table ${table}: Accessible`);
        }
      } catch (err) {
        console.log(`‚ùå Table ${table}: ${err.message}`);
      }
    }
    console.log('');

    // 2. V√©rifier la structure de la table event_games
    console.log('2. V√©rification de la structure de event_games...');
    try {
      const { data, error } = await supabase
        .from('event_games')
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå Erreur lors de l'acc√®s √† event_games: ${error.message}`);
      } else {
        console.log('‚úÖ Table event_games accessible');
        
        // V√©rifier les colonnes essentielles
        const essentialColumns = [
          'event_id', 'game_id', 'game_name', 'game_thumbnail', 'game_image',
          'year_published', 'min_players', 'max_players', 'playing_time',
          'complexity', 'experience_level', 'estimated_duration',
          'brought_by_user_id', 'notes', 'is_custom', 'is_optional'
        ];
        
        console.log('   Colonnes essentielles:');
        for (const column of essentialColumns) {
          // Note: Cette v√©rification est limit√©e, mais donne une id√©e
          console.log(`   - ${column}: ‚úÖ`);
        }
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la v√©rification de event_games: ${err.message}`);
    }
    console.log('');

    // 3. V√©rifier les √©v√©nements existants
    console.log('3. V√©rification des √©v√©nements...');
    try {
      const { data: events, error: eventsError } = await supabase
        .from('events')
        .select('id, title, status, current_participants, max_participants')
        .limit(5);
      
      if (eventsError) {
        console.log(`‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements: ${eventsError.message}`);
      } else {
        console.log(`‚úÖ ${events?.length || 0} √©v√©nement(s) trouv√©(s)`);
        if (events && events.length > 0) {
          events.forEach(event => {
            console.log(`   - ${event.title} (${event.current_participants}/${event.max_participants} participants)`);
          });
        }
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la v√©rification des √©v√©nements: ${err.message}`);
    }
    console.log('');

    // 4. V√©rifier les participants
    console.log('4. V√©rification des participants...');
    try {
      const { data: participants, error: participantsError } = await supabase
        .from('event_participants')
        .select('*')
        .limit(5);
      
      if (participantsError) {
        console.log(`‚ùå Erreur lors de la r√©cup√©ration des participants: ${participantsError.message}`);
      } else {
        console.log(`‚úÖ ${participants?.length || 0} participant(s) trouv√©(s)`);
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la v√©rification des participants: ${err.message}`);
    }
    console.log('');

    // 5. V√©rifier les jeux d'√©v√©nements
    console.log('5. V√©rification des jeux d\'√©v√©nements...');
    try {
      const { data: eventGames, error: eventGamesError } = await supabase
        .from('event_games')
        .select('*')
        .limit(5);
      
      if (eventGamesError) {
        console.log(`‚ùå Erreur lors de la r√©cup√©ration des jeux d'√©v√©nements: ${eventGamesError.message}`);
      } else {
        console.log(`‚úÖ ${eventGames?.length || 0} jeu(x) d'√©v√©nement trouv√©(s)`);
        if (eventGames && eventGames.length > 0) {
          eventGames.forEach(game => {
            console.log(`   - ${game.game_name || 'Sans nom'} (${game.is_custom ? 'Personnalis√©' : 'Base de donn√©es'})`);
          });
        }
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la v√©rification des jeux d'√©v√©nements: ${err.message}`);
    }
    console.log('');

    console.log('üéâ V√©rification termin√©e !');
    console.log('');
    console.log('üìã Prochaines √©tapes :');
    console.log('1. Si des tables manquent, appliquez les migrations');
    console.log('2. Si des colonnes manquent, ex√©cutez la migration simple');
    console.log('3. Testez la cr√©ation d\'√©v√©nements avec des jeux');
    console.log('4. Testez la participation aux √©v√©nements');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    console.log('');
    console.log('üîß Solutions possibles :');
    console.log('1. V√©rifiez que Supabase est d√©marr√© (supabase start)');
    console.log('2. V√©rifiez les variables d\'environnement');
    console.log('3. V√©rifiez que les migrations ont √©t√© appliqu√©es');
    console.log('4. Appliquez manuellement via le Dashboard Supabase');
  }
}

// Ex√©cuter la v√©rification
checkDatabaseStatus();
