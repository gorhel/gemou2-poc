#!/bin/bash

# Script pour appliquer la migration adaptative de la table event_games
# Ce script applique la migration de mani√®re s√©curis√©e avec v√©rifications

echo "üéÆ Application de la migration adaptative pour event_games..."
echo "================================================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier si nous sommes dans le bon dossier
if [ ! -f "package.json" ] || [ ! -d "supabase" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet gemou2-poc"
    exit 1
fi

print_info "V√©rification de l'environnement..."

# V√©rifier si Supabase CLI est install√©
if ! command -v supabase &> /dev/null; then
    print_error "Supabase CLI n'est pas install√©."
    print_info "Installez-le avec: npm install -g supabase"
    exit 1
fi

print_success "Supabase CLI trouv√©"

# V√©rifier si le projet Supabase est li√©
if ! supabase status &> /dev/null; then
    print_error "Le projet n'est pas li√© √† Supabase."
    print_info "Ex√©cutez d'abord: supabase link"
    exit 1
fi

print_success "Projet Supabase li√©"

# V√©rifier si la migration existe
MIGRATION_FILE="supabase/migrations/20250125000000_adaptive_event_games_update.sql"
if [ ! -f "$MIGRATION_FILE" ]; then
    print_error "Fichier de migration non trouv√©: $MIGRATION_FILE"
    exit 1
fi

print_success "Fichier de migration trouv√©"

# Afficher un r√©sum√© de ce qui va √™tre fait
echo ""
print_info "R√©sum√© de la migration qui va √™tre appliqu√©e :"
echo "  üìã V√©rification de l'existence de la table event_games"
echo "  üîç V√©rification de chaque colonne avant ajout"
echo "  üìä Ajout des colonnes manquantes :"
echo "     - game_name, game_thumbnail, game_image"
echo "     - year_published, min_players, max_players"
echo "     - playing_time, complexity, experience_level"
echo "     - estimated_duration, brought_by_user_id"
echo "     - notes, is_custom, is_optional"
echo "  üöÄ Cr√©ation des index de performance"
echo "  üîí Mise √† jour des politiques RLS"
echo "  üìù Ajout des commentaires sur la table"

echo ""
read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_warning "Migration annul√©e par l'utilisateur"
    exit 0
fi

echo ""
print_info "D√©but de l'application de la migration..."

# Appliquer la migration
if supabase db push; then
    echo ""
    print_success "Migration appliqu√©e avec succ√®s !"
    echo ""
    print_info "V√©rifications post-migration :"
    
    # V√©rifier que la table existe et a les bonnes colonnes
    print_info "V√©rification de la structure de la table..."
    
    # Afficher les colonnes de la table
    echo ""
    print_info "Colonnes actuelles de la table event_games :"
    supabase db diff --schema public --table event_games 2>/dev/null || echo "Table event_games v√©rifi√©e"
    
    echo ""
    print_success "üéØ Migration termin√©e avec succ√®s !"
    echo ""
    print_info "Prochaines √©tapes recommand√©es :"
    echo "  1. Testez la cr√©ation d'√©v√©nements avec des jeux"
    echo "  2. V√©rifiez que les jeux sont sauvegard√©s correctement"
    echo "  3. Testez la participation aux √©v√©nements"
    echo "  4. V√©rifiez l'affichage des jeux dans l'interface"
    echo ""
    print_info "Pour tester, allez sur : http://localhost:3000/create-event"
    
else
    echo ""
    print_error "Erreur lors de l'application de la migration"
    echo ""
    print_info "Solutions possibles :"
    echo "  1. V√©rifiez que Supabase est d√©marr√© : supabase start"
    echo "  2. V√©rifiez les permissions de la base de donn√©es"
    echo "  3. Appliquez manuellement via le Dashboard Supabase"
    echo "  4. V√©rifiez les logs d'erreur ci-dessus"
    echo ""
    print_info "Fichier de migration disponible dans : $MIGRATION_FILE"
    exit 1
fi

echo ""
print_success "Script termin√© ! üéâ"
