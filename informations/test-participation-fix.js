const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://localhost:54321';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testParticipationSystem() {
  console.log('üß™ Test du syst√®me de participation aux √©v√©nements...\n');

  try {
    // 1. V√©rifier la structure de la table events
    console.log('1Ô∏è‚É£ V√©rification de la structure de la table events...');
    const { data: events, error: eventsError } = await supabase
      .from('events')
      .select('id, title, current_participants, max_participants, status')
      .limit(1);

    if (eventsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:', eventsError);
      return;
    }

    if (!events || events.length === 0) {
      console.log('‚ö†Ô∏è Aucun √©v√©nement trouv√©');
      return;
    }

    const event = events[0];
    console.log(`‚úÖ √âv√©nement trouv√©: "${event.title}"`);
    console.log(`   - Participants actuels: ${event.current_participants}`);
    console.log(`   - Participants max: ${event.max_participants}`);
    console.log(`   - Statut: ${event.status}\n`);

    // 2. V√©rifier la structure de la table event_participants
    console.log('2Ô∏è‚É£ V√©rification de la structure de la table event_participants...');
    const { data: participants, error: participantsError } = await supabase
      .from('event_participants')
      .select('*')
      .eq('event_id', event.id)
      .limit(5);

    if (participantsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des participants:', participantsError);
      return;
    }

    console.log(`‚úÖ ${participants.length} participant(s) trouv√©(s) pour cet √©v√©nement`);
    if (participants.length > 0) {
      console.log('   Participants:');
      participants.forEach((p, index) => {
        console.log(`   ${index + 1}. User ID: ${p.user_id}, Status: ${p.status}, Joined: ${p.joined_at}`);
      });
    }
    console.log('');

    // 3. V√©rifier la coh√©rence des donn√©es
    console.log('3Ô∏è‚É£ V√©rification de la coh√©rence des donn√©es...');
    const { count, error: countError } = await supabase
      .from('event_participants')
      .select('*', { count: 'exact', head: true })
      .eq('event_id', event.id);

    if (countError) {
      console.error('‚ùå Erreur lors du comptage des participants:', countError);
      return;
    }

    const actualCount = count || 0;
    const storedCount = event.current_participants;

    console.log(`   - Participants en base (event_participants): ${actualCount}`);
    console.log(`   - Participants stock√©s (events.current_participants): ${storedCount}`);

    if (actualCount === storedCount) {
      console.log('‚úÖ Les compteurs sont coh√©rents !');
    } else {
      console.log('‚ö†Ô∏è Incoh√©rence d√©tect√©e ! Les compteurs ne correspondent pas.');
      console.log('   Cela peut causer des probl√®mes de persistance.');
    }
    console.log('');

    // 4. V√©rifier les contraintes
    console.log('4Ô∏è‚É£ V√©rification des contraintes...');
    
    // V√©rifier que current_participants >= 0
    if (storedCount >= 0) {
      console.log('‚úÖ current_participants >= 0');
    } else {
      console.log('‚ùå current_participants < 0 (invalide)');
    }

    // V√©rifier que current_participants <= max_participants
    if (storedCount <= event.max_participants) {
      console.log('‚úÖ current_participants <= max_participants');
    } else {
      console.log('‚ùå current_participants > max_participants (invalide)');
    }

    // 5. Test de simulation d'ajout de participant
    console.log('\n5Ô∏è‚É£ Test de simulation...');
    console.log('   Simulation: Ajout d\'un participant');
    
    const newCount = storedCount + 1;
    if (newCount <= event.max_participants) {
      console.log(`   ‚úÖ Ajout possible: ${newCount}/${event.max_participants}`);
    } else {
      console.log(`   ‚ùå √âv√©nement complet: ${newCount}/${event.max_participants}`);
    }

    console.log('\nüéØ R√©sum√© du test:');
    console.log(`   - √âv√©nement: "${event.title}"`);
    console.log(`   - Participants actuels: ${storedCount}/${event.max_participants}`);
    console.log(`   - Coh√©rence: ${actualCount === storedCount ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Contraintes: ${storedCount >= 0 && storedCount <= event.max_participants ? '‚úÖ' : '‚ùå'}`);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testParticipationSystem();

