#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que Supabase local fonctionne correctement
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase local
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://localhost:54321';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testSupabaseLocal() {
  console.log('üß™ Test de Supabase local...\n');

  try {
    // 1. Test de connexion
    console.log('1. Test de connexion √† Supabase local...');
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);

    if (error) {
      console.log(`‚ùå Erreur de connexion: ${error.message}`);
      return;
    }
    console.log('‚úÖ Connexion √† Supabase local r√©ussie\n');

    // 2. Test des tables principales
    console.log('2. Test des tables principales...');
    
    const tables = ['profiles', 'events', 'event_participants', 'event_games'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Table ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Table ${table}: Accessible`);
        }
      } catch (err) {
        console.log(`‚ùå Table ${table}: ${err.message}`);
      }
    }
    console.log('');

    // 3. Test de cr√©ation d'un profil
    console.log('3. Test de cr√©ation d\'un profil...');
    try {
      const { data, error } = await supabase
        .from('profiles')
        .insert({
          id: '00000000-0000-0000-0000-000000000001',
          username: 'test_user',
          full_name: 'Test User',
          email: 'test@example.com'
        })
        .select();

      if (error) {
        if (error.code === '23505') {
          console.log('‚úÖ Profil de test existe d√©j√† (normal)');
        } else {
          console.log(`‚ùå Erreur lors de la cr√©ation du profil: ${error.message}`);
        }
      } else {
        console.log('‚úÖ Profil de test cr√©√© avec succ√®s');
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la cr√©ation du profil: ${err.message}`);
    }
    console.log('');

    // 4. Test de cr√©ation d'un √©v√©nement
    console.log('4. Test de cr√©ation d\'un √©v√©nement...');
    try {
      const { data, error } = await supabase
        .from('events')
        .insert({
          id: '00000000-0000-0000-0000-000000000001',
          title: 'Test Event',
          description: 'Event de test',
          date_time: new Date().toISOString(),
          location: 'Test Location',
          max_participants: 4,
          current_participants: 0,
          status: 'active',
          creator_id: '00000000-0000-0000-0000-000000000001'
        })
        .select();

      if (error) {
        if (error.code === '23505') {
          console.log('‚úÖ √âv√©nement de test existe d√©j√† (normal)');
        } else {
          console.log(`‚ùå Erreur lors de la cr√©ation de l'√©v√©nement: ${error.message}`);
        }
      } else {
        console.log('‚úÖ √âv√©nement de test cr√©√© avec succ√®s');
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la cr√©ation de l'√©v√©nement: ${err.message}`);
    }
    console.log('');

    // 5. Test de la table event_games
    console.log('5. Test de la table event_games...');
    try {
      const { data, error } = await supabase
        .from('event_games')
        .insert({
          event_id: '00000000-0000-0000-0000-000000000001',
          game_name: 'Test Game',
          is_custom: true,
          is_optional: false,
          experience_level: 'beginner'
        })
        .select();

      if (error) {
        if (error.code === '23505') {
          console.log('‚úÖ Jeu de test existe d√©j√† (normal)');
        } else {
          console.log(`‚ùå Erreur lors de la cr√©ation du jeu: ${error.message}`);
        }
      } else {
        console.log('‚úÖ Jeu de test cr√©√© avec succ√®s');
      }
    } catch (err) {
      console.log(`‚ùå Erreur lors de la cr√©ation du jeu: ${err.message}`);
    }
    console.log('');

    console.log('üéâ Tests termin√©s !');
    console.log('');
    console.log('üìã Prochaines √©tapes :');
    console.log('1. D√©marrez votre application Next.js');
    console.log('2. Testez la cr√©ation d\'√©v√©nements');
    console.log('3. Testez la participation aux √©v√©nements');
    console.log('4. Testez la gestion des jeux');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.log('');
    console.log('üîß Solutions possibles :');
    console.log('1. V√©rifiez que Supabase local est d√©marr√© (supabase start)');
    console.log('2. V√©rifiez les variables d\'environnement');
    console.log('3. V√©rifiez que les migrations ont √©t√© appliqu√©es');
    console.log('4. Red√©marrez Supabase local (supabase restart)');
  }
}

// Ex√©cuter les tests
testSupabaseLocal();
